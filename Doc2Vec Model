#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 18 11:06:43 2022

@author: DRK

An experiment to example Doc2Vec Topical clustering
"""


# imports
import pandas as pd
import numpy as np
import scipy.stats as st
from datetime import datetime
import re
from lxml import etree


print('Processing Post data...')


# Stopwords are words with little to no meaning value
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
STOPWORDS = stopwords.words('english')
STOPWORDS.extend(["0o", "0s", "3a", "3b", "3d", "6b", "6o", "a", "a1", "a2",
                  "a3", "a4", "ab", "able", "about", "above", "abst", "ac",
                  "accordance", "according", "accordingly", "across", "act",
                  "actually", "ad", "added", "adj", "ae", "af", "affected",
                  "affecting", "affects", "after", "afterwards", "ag", "again",
                  "against", "ah", "ain", "ain't", "aj", "al", "all", "allow",
                  "allows", "almost", "alone", "along", "already", "also",
                  "although", "always", "am", "among", "amongst", "amoungst",
                  "amount", "an", "and", "announce", "another", "any",
                  "anybody", "anyhow", "anymore", "anyone", "anything",
                  "anyway", "anyways", "anywhere", "ao", "ap", "apart",
                  "apparently", "appear", "appreciate", "appropriate",
                  "approximately", "ar", "are", "aren", "arent", "aren't",
                  "arise", "around", "as", "a's", "aside", "ask", "asking",
                  "associated", "at", "au", "auth", "av", "available", "aw",
                  "away", "awfully", "ax", "ay", "az", "b", "b1", "b2", "b3",
                  "ba", "back", "bc", "bd", "be", "became", "because",
                  "become", "becomes", "becoming", "been", "before",
                  "beforehand", "begin", "beginning", "beginnings",
                  "begins", "behind", "being", "believe", "below", "beside",
                  "besides", "best", "better", "between", "beyond", "bi",
                  "bill", "biol", "bj", "bk", "bl", "bn", "both", "bottom",
                  "bp", "br", "brief", "briefly", "bs", "bt", "bu", "but",
                  "bx", "by", "c", "c1", "c2", "c3", "ca", "call", "came",
                  "can", "cannot", "cant", "can't", "cause", "causes", "cc",
                  "cd", "ce", "certain", "certainly", "cf", "cg", "ch",
                  "changes", "ci", "cit", "cj", "cl", "clearly", "cm", "c'mon",
                  "cn", "co", "com", "come", "comes", "con", "concerning",
                  "consequently", "consider", "considering", "contain",
                  "containing", "contains", "corresponding", "could",
                  "couldn", "couldnt", "couldn't", "course", "cp", "cq", "cr",
                  "cry", "cs", "c's", "ct", "cu", "currently", "cv", "cx",
                  "cy", "cz", "d", "d2", "da", "date", "dc", "dd", "de",
                  "definitely", "describe", "described", "despite", "detail",
                  "df", "di", "did", "didn", "didn't", "different", "dj", "dk", 
                  "dl", "do", "does", "doesn", "doesn't", "doing", "don", 
                  "done", "don't", "down", "downwards", "dp", "dr", "ds", "dt", 
                  "du", "due", "during", "dx", "dy", "e", "e2", "e3", "ea", 
                  "each", "ec", "ed", "edu", "ee", "ef", "effect", "eg", "ei", 
                  "eight", "eighty", "either", "ej", "el", "eleven", "else", 
                  "elsewhere", "em", "empty", "en", "end", "ending", "enough", 
                  "entirely", "eo", "ep", "eq", "er", "es", "especially", 
                  "est", "et", "et-al", "etc", "eu", "ev", "even", "ever", 
                  "every", "everybody", "everyone", "everything", "everywhere", 
                  "ex", "exactly", "example", "except", "ey", "f", "f2", "fa", 
                  "far", "fc", "few", "ff", "fi", "fifteen", "fifth", "fify", 
                  "fill", "find", "fire", "first", "five", "fix", "fj", "fl", 
                  "fn", "fo", "followed", "following", "follows", "for", 
                  "former", "formerly", "forth", "forty", "found", "four", 
                  "fr", "from", "front", "fs", "ft", "fu", "full", "further", 
                  "furthermore", "fy", "g", "ga", "gave", "ge", "get", "gets", 
                  "getting", "gi", "give", "given", "gives", "giving", "gj", 
                  "gl", "go", "goes", "going", "gone", "got", "gotten", "gr", 
                  "greetings", "gs", "gy", "h", "h2", "h3", "had", "hadn", 
                  "hadn't", "happens", "hardly", "has", "hasn", "hasnt", 
                  "hasn't", "have", "haven", "haven't", "having", "he", "hed", 
                  "he'd", "he'll", "hello", "help", "hence", "her", "here", 
                  "hereafter", "hereby", "herein", "heres", "here's", 
                  "hereupon", "hers", "herself", "hes", "he's", "hh", "hi", 
                  "hid", "him", "himself", "his", "hither", "hj", "ho", "home", 
                  "hopefully", "how", "howbeit", "however", "how's", "hr", "hs",
                  "http", "hu", "hundred", "hy", "i", "i2", "i3", "i4", "i6", 
                  "i7", "i8", "ia", "ib", "ibid", "ic", "id", "i'd", "ie", 
                  "if", "ig", "ignored", "ih", "ii", "ij", "il", "i'll", "im", 
                  "i'm", "immediate", "immediately", "importance", "important", 
                  "in", "inasmuch", "inc", "indeed", "index", "indicate", 
                  "indicated", "indicates", "information", "inner", "insofar", 
                  "instead", "interest", "into", "invention", "inward", "io", 
                  "ip", "iq", "ir", "is", "isn", "isn't", "it", "itd", "it'd",
                  "it'll", "its", "it's", "itself", "iv", "i've", "ix", "iy", 
                  "iz", "j", "jj", "jr", "js", "jt", "ju", "just", "k", "ke", 
                  "keep", "keeps", "kept", "kg", "kj", "km", "know", "known", 
                  "knows", "ko", "l", "l2", "la", "largely", "last", "lately", 
                  "later", "latter", "latterly", "lb", "lc", "le", "least", 
                  "les", "less", "lest", "let", "lets", "let's", "lf", "like", 
                  "liked", "likely", "line", "little", "lj", "ll", "ll", "ln", 
                  "lo", "look", "looking", "looks", "los", "lr", "ls", "lt", 
                  "ltd", "m", "m2", "ma", "made", "mainly", "make", "makes", 
                  "many", "may", "maybe", "me", "mean", "means", "meantime", 
                  "meanwhile", "merely", "mg", "might", "mightn", "mightn't", 
                  "mill", "million", "mine", "miss", "ml", "mn", "mo", "more", 
                  "moreover", "most", "mostly", "move", "mr", "mrs", "ms", 
                  "mt", "mu", "much", "mug", "must", "mustn", "mustn't", "my", 
                  "myself", "n", "n2", "na", "name", "namely", "nay", "nc", 
                  "nd", "ne", "near", "nearly", "necessarily", "necessary", 
                  "need", "needn", "needn't", "needs", "neither", "never", 
                  "nevertheless", "next", "ng", "ni", "nine", "ninety", "nl", 
                  "nn", "no", "nobody", "non", "none", "nonetheless", "noone", 
                  "nor", "normally", "nos", "not", "noted", "nothing", "novel", 
                  "now", "nowhere", "nr", "ns", "nt", "o", "oa", "ob", 
                  "obtain", "obtained", "obviously", "oc", "od", "of", "off", 
                  "often", "og", "oh", "oi", "oj", "ok", "okay", "ol", "old", 
                  "om", "omitted", "on", "once", "one", "ones", "only", "onto", 
                  "oo", "op", "oq", "or", "ord", "os", "ot", "other", "others", 
                  "otherwise", "ou", "ought", "our", "ours", "ourselves", 
                  "out", "outside", "over", "overall", "ow", "owing", "own", 
                  "ox", "oz", "p", "p1", "p2", "p3", "page", "pagecount", 
                  "pages", "par", "part", "particular", "particularly", "pas", 
                  "past", "pc", "pd", "pe", "per", "perhaps", "pf", "ph", "pi", 
                  "pj", "pk", "pl", "placed", "please", "plus", "pm", "pn", 
                  "po", "poorly", "possible", "possibly", "potentially", "pp", 
                  "pq", "pr", "predominantly", "present", "presumably", 
                  "previously", "primarily", "probably", "promptly", "proud", 
                  "provides", "ps", "pt", "pu", "put", "py", "q", "qj", "qu", 
                  "que", "quickly", "quite", "qv", "r", "r2", "ra", "ran", 
                  "rather", "rc", "rd", "re", "readily", "really", 
                  "reasonably", "recent", "recently", 
                  #"ref", "refs", 
                  "regarding", "regardless", "regards", "related", 
                  "relatively", "research", "research-articl", "respectively", 
                  "resulted", "resulting", "results", "rf", "rh", "ri", 
                  "right", "rj", "rl", "rm", "rn", "ro", "rq", "rr", "rs", 
                  "rt", "ru", "run", "rv", "ry", "s", "s2", "sa", "said", 
                  "same", "saw", "say", "saying", "says", "sc", "sd", "se", 
                  "sec", "second", "secondly", "section", "see", "seeing", 
                  "seem", "seemed", "seeming", "seems", "seen", "self", 
                  "selves", "sensible", "sent", "serious", "seriously", 
                  "seven", "several", "sf", "shall", "shan", "shan't", "she", 
                  "shed", "she'd", "she'll", "shes", "she's", "should", 
                  "shouldn", "shouldn't", "should've", "show", "showed", 
                  "shown", "showns", "shows", "si", "side", "significant", 
                  "significantly", "similar", "similarly", "since", "sincere", 
                  "six", "sixty", "sj", "sl", "slightly", "sm", "sn", "so", 
                  "some", "somebody", "somehow", "someone", "somethan", 
                  "something", "sometime", "sometimes", "somewhat", 
                  "somewhere", "soon", "sorry", "sp", "specifically", 
                  "specified", "specify", "specifying", "sq", "sr", "ss", "st", 
                  "still", "stop", "strongly", "sub", "substantially", 
                  "successfully", "such", "sufficiently", "suggest", "sup", 
                  "sure", "sy", "system", "sz", "t", "t1", "t2", "t3", "take", 
                  "taken", "taking", "tb", "tc", "td", "te", "tell", "ten", 
                  "tends", "tf", "th", "than", "thank", "thanks", "thanx", 
                  "that", "that'll", "thats", "that's", "that've", "the", 
                  "their", "theirs", "them", "themselves", "then", "thence", 
                  "there", "thereafter", "thereby", "thered", "therefore", 
                  "therein", "there'll", "thereof", "therere", "theres", 
                  "there's", "thereto", "thereupon", "there've", "these", 
                  "they", "theyd", "they'd", "they'll", "theyre", "they're", 
                  "they've", "thickv", "thin", "think", "third", "this", 
                  "thorough", "thoroughly", "those", "thou", "though", 
                  "thoughh", "thousand", "three", "throug", "through", 
                  "throughout", "thru", "thus", "ti", "til", "tip", "tj", "tl", 
                  "tm", "tn", "to", "together", "too", "took", "top", "toward", 
                  "towards", "tp", "tq", "tr", "tried", "tries", "truly", 
                  "try", "trying", "ts", "t's", "tt", "tv", "twelve", "twenty", 
                  "twice", "two", "tx", "u", "u201d", "ue", "ui", "uj", "uk", 
                  "um", "un", "under", "unfortunately", "unless", "unlike", 
                  "unlikely", "until", "unto", "uo", "up", "upon", "ups", "ur", 
                  "us", "use", "used", "useful", "usefully", "usefulness", 
                  "uses", "using", "usually", "ut", "v", "va", "value", 
                  "various", "vd", "ve", "ve", "very", "via", "viz", "vj", 
                  "vo", "vol", "vols", "volumtype", "vq", "vs", "vt", "vu", 
                  "w", "wa", "want", "wants", "was", "wasn", "wasnt", "wasn't", 
                  "way", "we", "wed", "we'd", "welcome", "well", "we'll", 
                  "well-b", "went", "were", "we're", "weren", "werent", 
                  "weren't", "we've", "what", "whatever", "what'll", "whats", 
                  "what's", "when", "whence", "whenever", "when's", "where", 
                  "whereafter", "whereas", "whereby", "wherein", "wheres", 
                  "where's", "whereupon", "wherever", "whether", "which", 
                  "while", "whim", "whither", "who", "whod", "whoever", 
                  "whole", "who'll", "whom", "whomever", "whos", "who's", 
                  "whose", "why", "why's", "wi", "widely", "will", "willing", 
                  "wish", "with", "within", "without", "wo", "won", "wonder", 
                  "wont", "won't", "words", "world", "would", "wouldn", 
                  "wouldnt", "wouldn't", "www", "x", "x1", "x2", "x3", "xf", 
                  "xi", "xj", "xk", "xl", "xn", "xo", "xs", "xt", "xv", "xx", 
                  "y", "y2", "yes", "yet", "yj", "yl", "you", "youd", "you'd", 
                  "you'll", "your", "youre", "you're", "yours", "yourself", 
                  "yourselves", "you've", "yr", "ys", "yt", "z", "zero", "zi", 
                  "zz"])


STOPWORDS.extend(['nan', 'sports', 'post', 'continue', 'reading', 'appeared', 
                  'saturday', 'sunday', 'monday', 'tuesday', 'wednesday', 
                  'thursday', 'friday', 'appeared', 'sportsnetca', 'read', 
                  'sportsnet', '2022', '22bet', 'summary', 'https', 'http', 
                  'outlook', 'twitter', 'facebook', 'from', 'subject', 're', 
                  'edu', 'use', 'summary', 'http', 'https', 'update', 'year', 
                  'view', 'views', 'site', 'lifestyle', 'technology', 'news', 
                  'ly', 'purpleptsd', 'live', 'stream', 'views', 'today',
                  'subscribe', 'bit', 'espn', 'espns', 'espnplus', 'youtubetv',  
                  'publish', 'click', 'from', 'subject', 're', 'edu', 'use', 
                  'summary', 'http',  'https', 'update', 'year', 'view', 
                  'views', 'site', 'lifestyle', 'technology', 'news', 'ly', 
                  'purpleptsd', 'live', 'stream', 'twitter', 'facebook', 
                  'youtube', 'app', 'prospectinsider',  'apps', 'fansided', 
                  'fanside', 'fansided', 'podcast',  'entertainment', 'watch', 
                  'update', 'updates', 'link', 'links', 'streamed', 'updated', 
                  'sky', 'rte', 'happen', 'april'])

STOPWORDS.extend(['league', 'game', 'team', 'player', 'season', 'time',
                 'play', 'playing', 'week', 'teams', 'games', 'players', 
                 'fan', 'fans'])

STOPWORDS = list(set(STOPWORDS))


# Load Post History
Post_df = pd.read_excel('Post_History.xlsx')

Post_df = Post_df[~Post_df['summary'].str.contains('Your trial has expired.')]

# In[]
Search_String = 'Use of this feed is for personal non-commercial use only. '
Post_df['summary'] = [str(doc).split(Search_String)[0] for doc in Post_df['summary'].tolist()]

Search_Results = Post_df[Post_df['summary'].str.contains(Search_String)]


# In[]
def cleanhtml(raw_html):
    response = etree.HTML(text=raw_html)
    return response.xpath('string(.)')


import gensim
from gensim.utils import simple_preprocess
import gensim.corpora as corpora
from gensim.corpora import Dictionary
from gensim.models import LdaModel
import nltk

from nltk.corpus import stopwords
from pprint import pprint

# spacy for lemmatization
import spacy


stop_words = STOPWORDS
stop_words = list(set(stop_words))

def sent_to_words(sentences):
    for sentence in sentences:
        # deacc=True removes punctuations
        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))


def remove_stopwords(texts):
    return [[word for word in simple_preprocess(str(doc)) 
             if word not in stop_words] for doc in texts]


# Initialize spacy 'en' model, keeping only tagger component (for efficiency)
# python3 -m spacy download en
nlp = spacy.load('en_core_web_lg', disable=['parser', 'ner'])

print('Preprocessing Posts for Dco2Vec analysis...')
papers = pd.DataFrame()
papers['title'] = Post_df['title']
papers['summary'] = Post_df['summary']
papers['paper_text'] = Post_df['title'] + ".  " + Post_df['summary']

# Remove punctuation
papers['paper_text_processed'] =[cleanhtml(str(post)) for post in papers['paper_text']]

# Replace non-alpha numeric characters with spaces
papers['paper_text_processed'] = papers['paper_text_processed'].map(lambda x: re.sub('[^A-Za-z0-9]+', ' ', x))
# Remove excess whitespace
papers['paper_text_processed'] = papers['paper_text_processed'].map(lambda x: re.sub(' +', ' ', x))
papers['paper_text_processed'] = [doc.strip() for doc in papers['paper_text_processed'].tolist()]

# Convert to lowercase
papers['paper_text_processed'] = papers['paper_text_processed'].map(lambda x: x.lower())

# Delete stopwords from Processed Text
papers['paper_text_processed'] = [' '.join([word for word in doc.split() if word not in STOPWORDS]) for doc in papers['paper_text_processed'].tolist()]

# In[]
""" In the following experiment, we train a deep neural network to determine the
number of topics in the corpus of posts, find document vectors and relate to 
those topics"""

from top2vec import Top2Vec

Train_Model = True
if Train_Model:
    model = Top2Vec(papers['paper_text_processed'].tolist())
    FormattedDate = datetime.now().strftime("%y%m%d%H%M")
    model.save(FormattedDate + "_Top2VecModel.mod")
else:
    model = Top2Vec.load('2205191351_Top2VecModel.mod')

# In[]

# Print Tops closest to Keyword Search;
# Keywords = ["NFL", "Draft", "QB"]
# documents, document_scores, document_ids = model.search_documents_by_keywords(keywords=Keywords, num_docs=10)
# for doc, score, doc_id in zip(documents, document_scores, document_ids):
#     print(f"Document: {doc_id}, Score: {score}")
#     print("-----------")
#     print(cleanhtml(papers['title'].tolist()[doc_id]))
#     print(cleanhtml(papers['summary'].tolist()[doc_id]))
#     print("-----------")
#     print()
    
# In[]

Post_df['Topic'] = ['Topic '+str(x+1) for x in model.doc_top]
Post_df['Topic_Score'] = model.doc_dist
Post_df['Keywords'] = model.documents

# Calculate Age of Posts (in hours)
Post_df['Age'] = [datetime.utcnow() - x for x in Post_df['published'].tolist()] #  Calculate Post age
Post_df['Age'] = Post_df['Age'] / np.timedelta64(1, 'h')  # Convert to hours

# Normalize Age
Post_df['Age'] =(Post_df['Age'] - Post_df['Age'].mean()) / Post_df['Age'].std()
# Calculate the inverse probability of Age (newer have higher p values)
Post_df['Age'] = [1 - st.norm.cdf(x) for x in Post_df['Age'].tolist()]


Post_df['Rel_Age_Score'] = Post_df['Age'] * Post_df['Topic_Score']

Post_df_Sorted = Post_df.sort_values('Rel_Age_Score',ascending=False).reset_index()

Post_df_Sorted['doc_id'] = Post_df_Sorted['index']
Post_df_Sorted = Post_df_Sorted.drop('index', axis=1)

# In[]
Post_df_Sorted.to_excel('Doc2Vec Results.xlsx',index=False)

# In[]
""" Develop a way to map topics across model runs and their potential children
"""

Topic_Words = model.topic_words
Topic_Weights = model.topic_word_scores 
#for row in Topic_Words:
    



# In[]
from sklearn.metrics import pairwise_distances
import seaborn as sns
import matplotlib.pyplot as plt
import hdbscan
import umap

# Draw 2D Cluster Map
vectors = model._get_document_vectors()

Neighbor_min = min(model.topic_sizes)
Topic_count = len(model.topic_sizes)

umap_args = {'n_neighbors': Neighbor_min,
             'n_components': 3,
             'metric': 'cosine',
             'verbose': True}

umap_model = umap.UMAP(**umap_args).fit(vectors)

hdbscan_args = {'min_cluster_size': Neighbor_min,
                'metric': 'euclidean'} 

clusterer = hdbscan.HDBSCAN(**hdbscan_args).fit(umap_model.embedding_)

# Different colors for all topics
# color_palette = sns.color_palette("ch:start=.2,rot=-.3", Topic_count)
# cluster_colors = [color_palette[x] if x >= 0
#                   else (0.5, 0.5, 0.5)
#                   for x in clusterer.labels_]

# In[]

# Draw Post Search Clouds that indicate clusters
SearchTerms = ['Golden','State','Warriors']
#SearchTerms = ['Steve','Kerr']
SearchTerms = ['Stephen','Curry']
SearchTerms = ['NFL','Draft']

SearchTerms = ['Football']
SearchTerms = ['premier']
SearchTerms = ['Manchester','Liverpool']
SearchTerms = ['Liverpool']

# Draw Post Clouds
Topic_Ct = 91
topic_words, word_scores, topic_scores, topic_nums = model.search_topics(keywords=SearchTerms, num_topics=Topic_Ct)
# for topic in topic_nums:
#     model.generate_topic_wordcloud(topic)
#     plt.show()

# Topics colored for Search Keywords
color_palette = sns.color_palette("Reds", len(topic_nums))
cluster_colors = [color_palette[np.where(topic_nums == x)[0][0]] if x in topic_nums
                  else (0.5, 0.5, 0.5)
                  for x in clusterer.labels_]

cluster_member_colors = [sns.desaturate(x, p) for x, p in
                         zip(cluster_colors, clusterer.probabilities_)]

X = [x[0] for x in umap_model.embedding_]
Y = [x[1] for x in umap_model.embedding_]

plt.scatter(X ,Y, s=50, linewidth=0, c=cluster_member_colors, alpha=0.20)
plt.title(SearchTerms)
plt.show()

# In[]

